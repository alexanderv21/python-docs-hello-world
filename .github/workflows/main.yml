name: hello-world

on:
  push:
    branches:
      - master

env:
  RGLOCATION: southeastasia
  RGNAME: hello-world-rg
  ASPNAME: hello-world-asp
  AZWEBAPPNAME: hello-world-app-0001
  AZWEBAPPPCKGPATH: '.'

jobs:
  provision-infra:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Terraform Preparation
      run: |
        # Exit when any command returns a failure status.
        set -e
        
        cd ./.github/terraform

        # Write terraform.tfvars.
        echo 'resource_group_location = "'${{ env.RGLOCATION }}'"' | tee terraform.tfvars
        echo 'resource_group_name = "'${{ env.RGNAME }}'"' | tee -a terraform.tfvars
        echo 'app_service_plan_name = "'${{ env.ASPNAME }}'"' | tee -a terraform.tfvars
        echo 'app_service_name = "'${{ env.AZWEBAPPNAME }}'"' | tee -a terraform.tfvars
        
        # Write backend.tfvars.
        echo 'resource_group_name = "'$TFSTATERG'"' | tee backend.tfvars
        echo 'storage_account_name = "'$TFSTATESTORAGE'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars

        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"

        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TFSTATERG: ${{ secrets.TFSTATERG }}
        TFSTATESTORAGE: ${{ secrets.TFSTATESTORAGE }}
        ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
        ARM_CLIENT_SECRET: ${{ secrets.CLIENTSECRET }}
        ARM_TENANT_ID: ${{ secrets.TENANTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
        
  build-test-and-deploy:
    needs: provision-infra
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: AZ Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZCREDENTIALS }}

    - name: Set up Python version
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./*.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./*.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Build using AppService-Build
      uses: azure/appservice-build@v2
      with:
        platform: python
        platform-version: '3.8'

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZWEBAPPNAME }}
        package: ${{ env.AZWEBAPPPCKGPATH }}

    - name: AZ Logout
      run: |
        az logout
